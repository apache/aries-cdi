<?xml version="1.0" encoding="UTF-8"?>
<!--
/*
 * Copyright (c) OSGi Alliance (2017). All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *			http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:cdi="http://www.osgi.org/xmlns/cdi/v1.0.0"
	targetNamespace="http://www.osgi.org/xmlns/cdi/v1.0.0"
	elementFormDefault="unqualified"
	attributeFormDefault="unqualified"
	version="1.0.0">

	<annotation>
		<documentation xml:lang="en">
			This is the XML Schema for OSGi Bean descriptions used by
			the OSGi CDI Extender. OSGi Bean description documents
			may be embedded in other XML documents. The OSGi CDI Extender
			will process all XML documents listed in the osgi.beans
			attribute of the CDI extender requirement. CDI Beans named by the
			descriptor are described as components. XML documents containing
			OSGi Bean descriptions may contain one or more component elements.
			Use of the namespace for bean descriptions is mandatory. The
			attributes and subelements of component elements are always
			unqualified.
		</documentation>
	</annotation>
	<element name="component" type="cdi:Tcomponent" />
	<complexType name="Tcomponent">
		<sequence>
			<annotation>
				<documentation xml:lang="en">
					Implementations of CDI Support must not require component
					descriptions to specify the sub-elements of the component
					element in the order as required by the schema. CDI Support
					implementations must allow other orderings since
					arbitrary orderings do not affect the meaning of the
					component description. Only the relative ordering of
					property elements have meaning.
				</documentation>
			</annotation>
			<element name="configuration" maxOccurs="unbounded" minOccurs="0" type="cdi:Tconfiguration" />
			<element name="property" maxOccurs="unbounded" minOccurs="0" type="cdi:Tproperty" />
			<element name="provide" maxOccurs="unbounded" minOccurs="0" type="cdi:Tprovide" />
			<element name="reference" maxOccurs="unbounded" minOccurs="0" type="cdi:Treference" />
			<any namespace="##other" maxOccurs="unbounded" minOccurs="0" processContents="lax" />
		</sequence>
		<attribute name="class" type="token" use="required" />
		<attribute name="name" type="token" use="optional">
			<annotation>
				<documentation xml:lang="en">
					The default value of this attribute is the value of
					the class attribute. If multiple component elements use the same
					value for the class attribute, then using the default value
					for this attribute will result in duplicate names.
					In this case, this attribute must be specified with
					a unique value.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="service-scope" default="none" type="cdi:Tservice_scope" use="optional" />
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Tconfiguration">
		<sequence>
			<any namespace="##any" processContents="lax"
				minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="configuration-policy" default="optional" type="cdi:Tconfiguration-policy" use="optional" />
		<attribute name="configuration-pid" use="optional">
			<annotation>
				<documentation xml:lang="en">
					The default value is the name attribute of the component.
				</documentation>
			</annotation>
			<simpleType>
				<restriction>
					<simpleType>
						<list itemType="token" />
					</simpleType>
					<minLength value="1" />
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="type" type="token" use="required" />
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Tmulti-value">
		<sequence>
		<element name="value" minOccurs="0" maxOccurs="unbounded" type="cdi:Tvalue"/>
		<any namespace="##other" minOccurs="0" maxOccurs="unbounded"
			processContents="lax" />
		</sequence>
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Tproperty" mixed="true">
		<sequence maxOccurs="1">
			<choice minOccurs="0" maxOccurs="1">
				<element name="array" type="cdi:Tmulti-value"/>
				<element name="list" type="cdi:Tmulti-value"/>
				<element name="set" type="cdi:Tmulti-value"/>
			</choice>
			<any namespace="##other" minOccurs="0" maxOccurs="unbounded" processContents="lax" />
		</sequence>
		<attribute name="name" type="string" use="required" />
		<attribute name="value" type="string" use="optional" />
		<attribute name="value-type" default="String" type="cdi:Tvalue-types" use="optional" />
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Tprovide">
		<sequence>
			<any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="interface" type="token" use="required" />
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Treference">
		<sequence>
			<any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="cardinality" default="1..1" type="cdi:Tcardinality" use="optional" />
		<attribute name="name" type="token" use="optional" />
		<attribute name="policy" default="static" type="cdi:Tpolicy" use="optional" />
		<attribute name="policy-option" default="reluctant" type="cdi:Tpolicy-option" use="optional" />
		<attribute name="scope" default="bundle" type="cdi:Treference_scope" use="optional" />
		<attribute name="service" type="token" use="required" />
		<attribute name="target" type="string" use="optional" />
		<anyAttribute processContents="lax" />
	</complexType>

	<complexType name="Tvalue" mixed="true">
		<sequence>
		<any namespace="##other" minOccurs="0" maxOccurs="unbounded"
			processContents="lax" />
		</sequence>
		<anyAttribute processContents="lax" />
	</complexType>

	<simpleType name="Tcardinality">
		<restriction base="string">
			<enumeration value="0..1" />
			<enumeration value="0..n" />
			<enumeration value="1..1" />
			<enumeration value="1..n" />
		</restriction>
	</simpleType>

	<simpleType name="Tconfiguration-policy">
		<restriction base="string">
			<enumeration value="factory" />
			<enumeration value="ignore" />
			<enumeration value="optional" />
			<enumeration value="require" />
		</restriction>
	</simpleType>

	<simpleType name="Tpolicy">
		<restriction base="string">
			<enumeration value="dynamic" />
			<enumeration value="static" />
		</restriction>
	</simpleType>

	<simpleType name="Tpolicy-option">
		<restriction base="string">
			<enumeration value="greedy" />
			<enumeration value="reluctant" />
		</restriction>
	</simpleType>

	<simpleType name="Treference_scope">
		<restriction base="string">
			<enumeration value="bundle" />
			<enumeration value="prototype" />
			<enumeration value="prototype_required" />
		</restriction>
	</simpleType>

	<simpleType name="Tservice_scope">
		<restriction base="string">
			<enumeration value="bundle" />
			<enumeration value="none" />
			<enumeration value="prototype" />
			<enumeration value="singleton" />
		</restriction>
	</simpleType>

	<!-- Specifies the data type of a property or of the elements in a multi-value
			property. Numerical and boolean values are trimmed before they are processed.
			Simple types are automatically boxed if needed. Only the array data type
			allows for simple type values. When specifying a simple type on any other
			type of property it will automatically be boxed. -->
	<simpleType name="Tvalue-types">
		<restriction base="string">
			<enumeration value="boolean" />
			<enumeration value="Boolean" />
			<enumeration value="byte" />
			<enumeration value="Byte" />
			<enumeration value="char" />
			<enumeration value="Character" />
			<enumeration value="double" />
			<enumeration value="Double" />
			<enumeration value="float" />
			<enumeration value="Float" />
			<enumeration value="int" />
			<enumeration value="Integer" />
			<enumeration value="long" />
			<enumeration value="Long" />
			<enumeration value="short" />
			<enumeration value="Short" />
			<enumeration value="String" />
		</restriction>
	</simpleType>

</schema>
